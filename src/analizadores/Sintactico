package analizadores; 

import patronesdediseno.PatronTemplate.*;


import java_cup.runtime.*;

parser code 
{:   

    /* Variable que guarda el árbol de sintáxis abstracta generado luego del análisis sintáctico */
    public Instruccion raiz;
    



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
:} 

terminal String mas,por,parizquierdo,parderecho;
terminal String entero;

non terminal INICIO;
non terminal Instruccion EXPRESION;

//Operaciones numericas
precedence left  mas;
precedence left  por;

start with INICIO; 

INICIO::= EXPRESION:a{:
    //Guardo la raiz de la operación
    parser.raiz = a;
:}
;


EXPRESION  ::=    
   EXPRESION:a mas         EXPRESION:b{: RESULT=new Suma(a,b); :}
 | EXPRESION:a por         EXPRESION:b{: RESULT=new Multiplicacion(a,b); :}
 | entero:a                           {: RESULT=new NumeroEntero(a); :}
;